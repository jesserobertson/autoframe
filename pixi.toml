[project]
name = "autoframe"
version = "0.1.0"
description = "Automated dataframe creation with data quality reporting"
channels = ["conda-forge"]
platforms = ["osx-arm64", "linux-64"]

[dependencies]
python = ">=3.12,<3.13"
# Core dependencies  
loguru = ">=0.7.3,<0.8"
confection = ">=0.1.5,<0.2"
tenacity = ">=9.1.2,<10"
# Data processing
pandas = ">=2.0.0,<3"
polars = ">=0.20.0,<1"
pymongo = ">=4.0.0,<5"
# Optional visualization for quality reports
matplotlib = ">=3.7.0,<4"
seaborn = ">=0.12.0,<1"

[feature.dev.dependencies]
# Testing
pytest = "*"
pytest-cov = ">=6.2.1,<7"
hypothesis = "*"
pytest-asyncio = "*"
# Code quality
mypy = "*"
ruff = "*"
pre-commit = ">=4.2.0,<5"
# Build and distribution
python-build = ">=1.2.2.post1,<2"
twine = ">=6.1.0,<7"

[feature.docs.dependencies]
mkdocs = "*"
mkdocs-material = "*"
mkdocstrings = "*"
mkdocstrings-python = "*"

[environments]
default = ["dev", "docs"]
dev = ["dev"]
docs = ["docs"]

[pypi-dependencies]
logerr = { git = "https://github.com/jesserobertson/logerr.git" }

[tasks]
# Testing
test = "pytest tests/unit/ --cov=autoframe --cov-report=term --cov-report=xml"
test-integration = "pytest tests/integration/ -v"
test-all = "pytest tests/ --doctest-modules autoframe"
test-fast = "pytest tests/unit/ -x --ff"

# Code quality
typecheck = "mypy autoframe"
quality = "ruff check autoframe tests && ruff format --check autoframe tests"
format = "ruff format autoframe tests"
lint = "ruff check autoframe tests"

# Development
clean = "rm -rf htmlcov/ site/ .coverage .pytest_cache/ **/__pycache__/ **/*.pyc .mypy_cache/ .hypothesis/ dist/ build/ *.egg-info/"
check-all = { depends-on = ["test", "typecheck", "quality"] }

# Build and distribution
build = "python -m build"
distribute = "twine upload dist/*"

# Documentation
docs-serve = "mkdocs serve"
docs-build = "mkdocs build"

# Development helpers
install-pre-commit = "pre-commit install"
run-pre-commit = "pre-commit run --all-files"

# Test database management
test-db-start = "./scripts/test-db.sh start"
test-db-stop = "./scripts/test-db.sh stop"
test-db-reset = "./scripts/test-db.sh reset"
test-db-status = "./scripts/test-db.sh status"
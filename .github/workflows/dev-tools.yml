name: Development Tools

on:
  pull_request:
    types: [opened, synchronize]
  workflow_dispatch:

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Pixi
      uses: prefix-dev/setup-pixi@v0.8.1
      with:
        pixi-version: v0.34.0
        cache: true

    - name: Install dependencies
      run: pixi install

    - name: Run pre-commit hooks
      run: |
        if pixi run pre-commit --version > /dev/null 2>&1; then
          pixi run run-pre-commit
        else
          echo "Pre-commit not configured, running manual checks..."
          pixi run quality
          pixi run typecheck
        fi

  test-matrix:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.12"]
        test-type: [unit, integration]
        exclude:
          # Skip integration tests on Windows for now (MongoDB service setup is complex)
          - os: windows-latest
            test-type: integration
            
    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_DATABASE: autoframe_test
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        # Only run MongoDB service for integration tests on supported OS
        if: ${{ matrix.test-type == 'integration' && runner.os != 'Windows' }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Pixi
      uses: prefix-dev/setup-pixi@v0.8.1
      with:
        pixi-version: v0.34.0
        cache: true

    - name: Install dependencies
      run: pixi install

    - name: Run unit tests
      if: matrix.test-type == 'unit'
      run: pixi run test

    - name: Setup MongoDB test data and run integration tests
      if: matrix.test-type == 'integration'
      env:
        MONGODB_URI: mongodb://localhost:27017
      run: |
        # Wait for MongoDB
        until mongosh --eval "print(\"connection successful\")" > /dev/null 2>&1; do
          echo "Waiting for MongoDB..."
          sleep 2
        done
        
        # Setup minimal test data
        mongosh autoframe_test --eval "
          db.users.insertMany([
            {_id: 'user1', name: 'Alice', age: 30, active: true},
            {_id: 'user2', name: 'Bob', age: 25, active: true}
          ]);
        "
        
        # Run integration tests
        pixi run test-integration

  coverage-report:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Pixi
      uses: prefix-dev/setup-pixi@v0.8.1
      with:
        pixi-version: v0.34.0
        cache: true

    - name: Install dependencies
      run: pixi install

    - name: Run tests with coverage
      run: pixi run test

    - name: Generate coverage report
      run: |
        pixi run python -m coverage xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false